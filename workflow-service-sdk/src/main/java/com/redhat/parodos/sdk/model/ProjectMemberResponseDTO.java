/*
 * Parodos Workflow Service API
 * This is the API documentation for the Parodos Workflow Service. It provides operations to execute assessments to determine infrastructure options (tooling + environments). Also executes infrastructure task workflows to call downstream systems to stand-up an infrastructure option.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.redhat.parodos.sdk.model;

import java.io.IOException;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.redhat.parodos.sdk.invoker.JSON;

/**
 * ProjectMemberResponseDTO
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ProjectMemberResponseDTO {

	public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";

	@SerializedName(SERIALIZED_NAME_FIRST_NAME)
	private String firstName;

	public static final String SERIALIZED_NAME_LAST_NAME = "lastName";

	@SerializedName(SERIALIZED_NAME_LAST_NAME)
	private String lastName;

	public static final String SERIALIZED_NAME_ROLES = "roles";

	@SerializedName(SERIALIZED_NAME_ROLES)
	private Set<String> roles;

	public static final String SERIALIZED_NAME_USERNAME = "username";

	@SerializedName(SERIALIZED_NAME_USERNAME)
	private String username;

	public ProjectMemberResponseDTO() {
	}

	public ProjectMemberResponseDTO firstName(String firstName) {

		this.firstName = firstName;
		return this;
	}

	/**
	 * Get firstName
	 * @return firstName
	 **/
	@jakarta.annotation.Nullable
	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public ProjectMemberResponseDTO lastName(String lastName) {

		this.lastName = lastName;
		return this;
	}

	/**
	 * Get lastName
	 * @return lastName
	 **/
	@jakarta.annotation.Nullable
	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public ProjectMemberResponseDTO roles(Set<String> roles) {

		this.roles = roles;
		return this;
	}

	public ProjectMemberResponseDTO addRolesItem(String rolesItem) {
		if (this.roles == null) {
			this.roles = new LinkedHashSet<>();
		}
		this.roles.add(rolesItem);
		return this;
	}

	/**
	 * Get roles
	 * @return roles
	 **/
	@jakarta.annotation.Nullable
	public Set<String> getRoles() {
		return roles;
	}

	public void setRoles(Set<String> roles) {
		this.roles = roles;
	}

	public ProjectMemberResponseDTO username(String username) {

		this.username = username;
		return this;
	}

	/**
	 * Get username
	 * @return username
	 **/
	@jakarta.annotation.Nullable
	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ProjectMemberResponseDTO projectMemberResponseDTO = (ProjectMemberResponseDTO) o;
		return Objects.equals(this.firstName, projectMemberResponseDTO.firstName)
				&& Objects.equals(this.lastName, projectMemberResponseDTO.lastName)
				&& Objects.equals(this.roles, projectMemberResponseDTO.roles)
				&& Objects.equals(this.username, projectMemberResponseDTO.username);
	}

	@Override
	public int hashCode() {
		return Objects.hash(firstName, lastName, roles, username);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ProjectMemberResponseDTO {\n");
		sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
		sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
		sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
		sb.append("    username: ").append(toIndentedString(username)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the
	 * first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;

	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields = new HashSet<String>();
		openapiFields.add("firstName");
		openapiFields.add("lastName");
		openapiFields.add("roles");
		openapiFields.add("username");

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>();
	}

	/**
	 * Validates the JSON Object and throws an exception if issues found
	 * @param jsonObj JSON Object
	 * @throws IOException if the JSON Object is invalid with respect to
	 * ProjectMemberResponseDTO
	 */
	public static void validateJsonObject(JsonObject jsonObj) throws IOException {
		if (jsonObj == null) {
			if (!ProjectMemberResponseDTO.openapiRequiredFields.isEmpty()) { // has
																				// required
																				// fields
																				// but
																				// JSON
																				// object
																				// is null
				throw new IllegalArgumentException(String.format(
						"The required field(s) %s in ProjectMemberResponseDTO is not found in the empty JSON string",
						ProjectMemberResponseDTO.openapiRequiredFields.toString()));
			}
		}

		Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
		// check to see if the JSON string contains additional fields
		for (Entry<String, JsonElement> entry : entries) {
			if (!ProjectMemberResponseDTO.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(String.format(
						"The field `%s` in the JSON string is not defined in the `ProjectMemberResponseDTO` properties. JSON: %s",
						entry.getKey(), jsonObj.toString()));
			}
		}
		if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull())
				&& !jsonObj.get("firstName").isJsonPrimitive()) {
			throw new IllegalArgumentException(String.format(
					"Expected the field `firstName` to be a primitive type in the JSON string but got `%s`",
					jsonObj.get("firstName").toString()));
		}
		if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull())
				&& !jsonObj.get("lastName").isJsonPrimitive()) {
			throw new IllegalArgumentException(String.format(
					"Expected the field `lastName` to be a primitive type in the JSON string but got `%s`",
					jsonObj.get("lastName").toString()));
		}
		// ensure the optional json data is an array if present
		if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format("Expected the field `roles` to be an array in the JSON string but got `%s`",
							jsonObj.get("roles").toString()));
		}
		if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull())
				&& !jsonObj.get("username").isJsonPrimitive()) {
			throw new IllegalArgumentException(String.format(
					"Expected the field `username` to be a primitive type in the JSON string but got `%s`",
					jsonObj.get("username").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {

		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!ProjectMemberResponseDTO.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'ProjectMemberResponseDTO' and
								// its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<ProjectMemberResponseDTO> thisAdapter = gson.getDelegateAdapter(this,
					TypeToken.get(ProjectMemberResponseDTO.class));

			return (TypeAdapter<T>) new TypeAdapter<ProjectMemberResponseDTO>() {
				@Override
				public void write(JsonWriter out, ProjectMemberResponseDTO value) throws IOException {
					JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
					elementAdapter.write(out, obj);
				}

				@Override
				public ProjectMemberResponseDTO read(JsonReader in) throws IOException {
					JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
					validateJsonObject(jsonObj);
					return thisAdapter.fromJsonTree(jsonObj);
				}

			}.nullSafe();
		}

	}

	/**
	 * Create an instance of ProjectMemberResponseDTO given an JSON string
	 * @param jsonString JSON string
	 * @return An instance of ProjectMemberResponseDTO
	 * @throws IOException if the JSON string is invalid with respect to
	 * ProjectMemberResponseDTO
	 */
	public static ProjectMemberResponseDTO fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, ProjectMemberResponseDTO.class);
	}

	/**
	 * Convert an instance of ProjectMemberResponseDTO to an JSON string
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}

}
